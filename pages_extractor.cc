#include <utility>
#include <unordered_set>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <boost/optional.hpp>

#include <math.h>

#include "common.h"
#include "object_storage.h"
#include "charset_converter.h"
#include "diff_converter.h"
#include "to_unicode_converter.h"
#include "cmap.h"
#include "pages_extractor.h"
#include "coordinates.h"
#include "font_file2.h"
#include "font_file.h"
#include "converter_engine.h"

using namespace std;
using namespace boost;

namespace
{
    struct dist_t
    {
        dist_t(unsigned char c_arg,
               float d_arg,
               size_t obj1_arg,
               size_t obj2_arg) noexcept : d(d_arg), obj1(obj1_arg), obj2(obj2_arg), c(c_arg)
        {
        }
        float d;
        size_t obj1;
        size_t obj2;
        unsigned char c;
    };

    enum { MATRIX_ELEMENTS_NUM = 6, PDF_STRINGS_NUM = 5000 /*for optimization*/, MAX_BOXES = 300 };
    constexpr float LINE_OVERLAP = 0.5;
    constexpr float CHAR_MARGIN = 2.0;
    constexpr float WORD_MARGIN = 0.1;
    constexpr float LINE_MARGIN = 0.5;
    constexpr float BOXES_FLOW = 0.5;

    bool operator<(const dist_t &obj1, const dist_t &obj2)
    {
        if (obj1.c != obj2.c) return obj1.c < obj2.c;
        return obj1.d < obj2.d;
    }

    using extract_handler_t = void (PagesExtractor::*)(PagesExtractor::extract_argument_t& argument, size_t &i);
    using chunk_iterator_t = vector<text_chunk_t>::iterator;
    extract_handler_t get_extract_handler(const string &token)
    {
        //generated by gen_extract_handlers.pl
        static const extract_handler_t handlers[] =
            #include "extract_handlers.h"
            ;
        int hash;
        if (token.length() == 1) hash = token[0];
        else if (token.length() == 2) hash = token[0] * 'q' + token[1];
        else return nullptr;

        if (hash < '"' || hash > 'c' * 'q' + 'm') return nullptr;
        return handlers[hash];
    }

    float height(const coordinates_t &obj)
    {
        return obj.y1 - obj.y0;
    }

    float width(const text_chunk_t &obj)
    {
        return (obj.coordinates.x1 - obj.coordinates.x0) / obj.string_len;
    }

    float width(const text_t &obj)
    {
        return (obj.coordinates.x1 - obj.coordinates.x0) / utf8_length(obj.text);
    }

    float width(const coordinates_t &obj)
    {
        return obj.x1 - obj.x0;
    }

    bool is_zero_string(const text_chunk_t &line)
    {
        return width(line.coordinates) <= 0 || height(line.coordinates) <= 0;
    }

    bool is_between(const vector<text_chunk_t> &groups, size_t obj1, size_t obj2)
    {
        float x0 = min(groups[obj1].coordinates.x0, groups[obj2].coordinates.x0);
        float y0 = min(groups[obj1].coordinates.y0, groups[obj2].coordinates.y0);
        float x1 = max(groups[obj1].coordinates.x1, groups[obj2].coordinates.x1);
        float y1 = max(groups[obj1].coordinates.y1, groups[obj2].coordinates.y1);
        return find_if(groups.begin(), groups.end(), [x0, y0, x1, y1, obj1, obj2, &groups](const text_chunk_t &obj)
                       {
                           const coordinates_t &coord = obj.coordinates;
                           if (coord.x0 >= x0 && coord.y0 >= y0 && coord.x1 <= x1 && coord.y1 <= y1 &&
                               !obj.is_empty &&
                               !(obj == groups[obj1]) && !(obj == groups[obj2])) return true;
                           return false;
                       }) != groups.end();
    }

    size_t create_group(vector<text_chunk_t> &groups, size_t obj1, size_t obj2)
    {
        float pos1 = (1 - BOXES_FLOW) * (groups[obj1].coordinates.x0) -
                     (1 + BOXES_FLOW) * (groups[obj1].coordinates.y0 + groups[obj1].coordinates.y1);
        float pos2 = (1 - BOXES_FLOW) * (groups[obj2].coordinates.x0) -
                     (1 + BOXES_FLOW) * (groups[obj2].coordinates.y0 + groups[obj2].coordinates.y1);
        size_t o1 = (pos1 <= pos2)? obj1 : obj2;
        size_t o2 = (pos1 <= pos2)? obj2 : obj1;

        for (const text_t &text : groups[o2].texts)
        {
            if (text.coordinates.x0 < groups[o1].coordinates.x0) groups[o1].coordinates.x0 = text.coordinates.x0;
            if (text.coordinates.x1 > groups[o1].coordinates.x1) groups[o1].coordinates.x1 = text.coordinates.x1;
            if (text.coordinates.y0 < groups[o1].coordinates.y0) groups[o1].coordinates.y0 = text.coordinates.y0;
            if (text.coordinates.y1 > groups[o1].coordinates.y1) groups[o1].coordinates.y1 = text.coordinates.y1;
        }

        groups[o1].texts.insert(groups[o1].texts.end(),
                                std::make_move_iterator(groups[o2].texts.begin()),
                                std::make_move_iterator(groups[o2].texts.end()));
        groups[o2].is_empty = true;
        return o1;
    }

    string get_resource_name(const string &page, const string &object)
    {
        return "/" + page + "/" + object;
    }

    matrix_t init_CTM(unsigned int rotate, const mediabox_t &media_box)
    {
        if (rotate == 90) return matrix_t{0, -1, 1, 0, -media_box.at(1), media_box.at(2)};
        if (rotate == 180) return matrix_t{-1, 0, 0, -1, media_box.at(2), media_box.at(3)};
        if (rotate == 270) return matrix_t{0, 1, -1, 0, media_box.at(3), -media_box.at(0)};
        return matrix_t{1, 0, 0, 1, -media_box.at(0), -media_box.at(1)};
    }

    bool is_voverlap(const coordinates_t &obj1, const coordinates_t &obj2)
    {
        return obj2.y0 <= obj1.y1 && obj1.y0 <= obj2.y1;
    }

    bool is_hoverlap(const coordinates_t &obj1, const coordinates_t &obj2)
    {
        return obj2.x0 <= obj1.x1 && obj1.x0 <= obj2.x1;
    }

    float voverlap(const coordinates_t &obj1, const coordinates_t &obj2)
    {
        return is_voverlap(obj1, obj2)? min(fabs(obj1.y0 - obj2.y1), fabs(obj1.y1 - obj2.y0)) : 0;
    }

    float hdistance(const coordinates_t &obj1, const coordinates_t &obj2)
    {
        return is_hoverlap(obj1, obj2)? 0 : min(fabs(obj1.x0 - obj2.x1), fabs(obj1.x1 - obj2.x0));
    }

    bool is_halign(const text_chunk_t &obj1, const text_chunk_t &obj2)
    {
        return is_voverlap(obj1.coordinates, obj2.coordinates) &&
               (min(height(obj1.coordinates), height(obj2.coordinates)) * LINE_OVERLAP <
                voverlap(obj1.coordinates, obj2.coordinates)) &&
               (hdistance(obj1.coordinates, obj2.coordinates) < max(width(obj1), width(obj2)) * CHAR_MARGIN);
    }

    optional<pair<chunk_iterator_t, chunk_iterator_t>> get_zero_range(vector<text_chunk_t> &chunks,
                                                                      chunk_iterator_t start_it)
    {
        chunk_iterator_t found_it = find_if(start_it, chunks.end(), [] (const text_chunk_t &chunk)
                                            {
                                                return is_zero_string(chunk);
                                            });
        if (found_it == chunks.end()) return boost::none;
        for (chunk_iterator_t it = found_it + 1; it < chunks.end(); ++it)
        {
            if (is_zero_string(*it)) return make_pair(found_it, it);
        }
        return make_pair(found_it, chunks.end());
    }

    //some pdf strings have zero width or height. group those string together
    void group_zero_lines(vector<text_chunk_t> &lines)
    {
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
        optional<pair<chunk_iterator_t, chunk_iterator_t>> r;
#pragma GCC diagnostic warning "-Wmaybe-uninitialized"
        chunk_iterator_t start_it = lines.begin();
        while ((r = get_zero_range(lines, start_it)))
        {
            start_it = r->second;
            if (r->second - r->first == 1) continue;
            for (chunk_iterator_t it = r->first + 1; it < r->second; ++it)
            {
                r->first->texts[0].text += it->texts[0].text;
                if (r->first->coordinates.x0 > it->coordinates.x0) r->first->coordinates.x0 = it->coordinates.x0;
                if (r->first->coordinates.x1 < it->coordinates.x1) r->first->coordinates.x1 = it->coordinates.x1;
                if (r->first->coordinates.y0 > it->coordinates.y0) r->first->coordinates.y0 = it->coordinates.y0;
                if (r->first->coordinates.y1 < it->coordinates.y1) r->first->coordinates.y1 = it->coordinates.y1;
                r->first->string_len += it->string_len;
                it->is_empty = true;
            }
            r->first->texts[0].coordinates = r->first->coordinates;
        }
    }

    void clear_empty_strings(vector<text_chunk_t> &chunks)
    {
        chunks.erase(remove_if(chunks.begin(),
                               chunks.end(),
                               [](const text_chunk_t& chunk) {
                                   return chunk.string_len == 0 || chunk.is_empty;
                               }),
                     chunks.end());
    }

    text_chunk_t merge_lines(vector<text_chunk_t> &&lines)
    {
        if (lines.empty()) return text_chunk_t();
        group_zero_lines(lines);
        clear_empty_strings(lines);
        sort(lines.begin(), lines.end(),
             [](const text_chunk_t &a, const text_chunk_t &b) -> bool
             {
                 if (a.coordinates.y1 != b.coordinates.y1) return a.coordinates.y1 > b.coordinates.y1;
                 return a.coordinates.x0 < b.coordinates.x0;
             });
        text_chunk_t result(lines[0].texts[0].text + '\n', std::move(lines[0].coordinates));
        for (size_t i = 1; i < lines.size(); ++i)
        {
            result.texts[0].text += lines[i].texts[0].text + '\n';
            if (lines[i].coordinates.x0 < result.coordinates.x0) result.coordinates.x0 = lines[i].coordinates.x0;
            if (lines[i].coordinates.x1 > result.coordinates.x1) result.coordinates.x1 = lines[i].coordinates.x1;
            if (lines[i].coordinates.y0 < result.coordinates.y0) result.coordinates.y0 = lines[i].coordinates.y0;
            if (lines[i].coordinates.y1 > result.coordinates.y1) result.coordinates.y1 = lines[i].coordinates.y1;
            result.string_len += lines[i].string_len;
        }
        result.texts[0].coordinates = result.coordinates;

        return result;
    }

    void add2line(text_chunk_t &line, const text_chunk_t &obj)
    {
        line.string_len += obj.string_len;
        for (const text_t &text : obj.texts) line.texts.push_back(std::move(text));
        if (obj.coordinates.x0 < line.coordinates.x0) line.coordinates.x0 = obj.coordinates.x0;
        if (obj.coordinates.x1 > line.coordinates.x1) line.coordinates.x1 = obj.coordinates.x1;
        if (obj.coordinates.y0 < line.coordinates.y0) line.coordinates.y0 = obj.coordinates.y0;
        if (obj.coordinates.y1 > line.coordinates.y1) line.coordinates.y1 = obj.coordinates.y1;
    }

    vector<text_chunk_t> traverse_symbols(const vector<text_chunk_t> &chunks)
    {
        if (chunks.empty()) vector<text_chunk_t>();
        vector<text_chunk_t> result;
        text_chunk_t line;
        const text_chunk_t *obj0 = nullptr;
        for (const text_chunk_t &obj1 : chunks)
        {
            if (obj0)
            {
                bool is_cmp = is_halign(*obj0, obj1);
                if (is_cmp && !line.is_empty)
                {
                    add2line(line, obj1);
                }
                else if (!line.is_empty)
                {
                    result.push_back(line);
                    line.is_empty = true;
                }
                else if (is_cmp)
                {
                    line = *obj0;
                    line.is_empty = false;
                    add2line(line, obj1);
                }
                else
                {
                    result.push_back(*obj0);
                }
            }
            obj0 = &obj1;
        }
        if (line.is_empty && obj0) result.push_back(*obj0);
        if (!line.is_empty) result.push_back(line);
        return result;
    }

    bool is_neighbour_lines(const text_chunk_t &obj1, const text_chunk_t &obj2)
    {
        if (obj1.is_empty || obj2.is_empty) return false;
        float height1 = height(obj1.coordinates), height2 = height(obj2.coordinates);
        float d = LINE_MARGIN * max(height1, height2);
        if (fabs(height1 - height2) < d &&
            obj2.coordinates.x1 > obj1.coordinates.x0 && obj2.coordinates.x0 < obj1.coordinates.x1 &&
            obj2.coordinates.y0 < obj1.coordinates.y1 + d && obj2.coordinates.y1 > obj1.coordinates.y0 - d &&
            (fabs(obj1.coordinates.x0 - obj2.coordinates.x0) < d ||
             fabs(obj1.coordinates.x1 - obj2.coordinates.x1) < d))
        {
            return true;
        }
        return false;
    }

    vector<text_chunk_t> get_neighbour_lines(vector<text_chunk_t> &&lines, text_chunk_t&& line_arg)
    {
        vector<text_chunk_t> result;
        result.push_back(std::move(line_arg));
        for (size_t i = 0; i < result.size(); ++i)
        {
            for (text_chunk_t &line : lines)
            {
                if (is_neighbour_lines(line, result[i])) result.push_back(std::move(line));
            }
        }
        return result;
    }

    vector<text_chunk_t> make_text_boxes(vector<text_chunk_t> &&lines)
    {
        vector<text_chunk_t> text_boxes;
        auto not_empty = [](const text_chunk_t &line) { return !line.is_empty; };
        for (auto it = find_if(lines.begin(), lines.end(), not_empty);
             it != lines.end();
             it = find_if(it, lines.end(), not_empty))
        {
            text_chunk_t line = merge_lines(get_neighbour_lines(std::move(lines), *std::make_move_iterator(it)));
            if (line.is_empty) continue;
            text_boxes.push_back(std::move(line));
        }
        group_zero_lines(text_boxes);
        clear_empty_strings(text_boxes);
        return text_boxes;
    }

    void merge_chars(vector<text_chunk_t> &chars)
    {
        for (text_chunk_t &line : chars)
        {
            if (line.texts.empty()) continue;
            vector<text_t> whole_line{text_t(line.coordinates)};
            sort(line.texts.begin(), line.texts.end(),
                 [](const text_t &a, const text_t &b) -> bool
                 {
                     return a.coordinates.x0 < b.coordinates.x0;
                 });
            for (size_t i = 0; i < line.texts.size(); ++i)
            {
                whole_line[0].text += line.texts[i].text;
                if ((i != line.texts.size() - 1) &&
                    line.texts[i].coordinates.x1 < line.texts[i + 1].coordinates.x0 -
                    max(height(line.texts[i + 1].coordinates), width(line.texts[i + 1])) * WORD_MARGIN)
                {
                    whole_line[0].text += ' ';
                }
            }
            line.texts = std::move(whole_line);
        }
    }

    vector<text_chunk_t> make_text_lines(vector<text_chunk_t> &chunks)
    {
        clear_empty_strings(chunks);
        vector<text_chunk_t> result = traverse_symbols(chunks);
        merge_chars(result);
        return result;
    }

    float get_dist(const text_chunk_t &obj1, const text_chunk_t &obj2)
    {
        float x0 = min(obj1.coordinates.x0, obj2.coordinates.x0);
        float y0 = min(obj1.coordinates.y0, obj2.coordinates.y0);
        float x1 = max(obj1.coordinates.x1, obj2.coordinates.x1);
        float y1 = max(obj1.coordinates.y1, obj2.coordinates.y1);
        return (x1 - x0) * (y1 - y0) -
               width(obj1.coordinates) * height(obj1.coordinates) - width(obj2.coordinates) * height(obj2.coordinates);
    }

    text_chunk_t boxes_as_is(const vector<text_chunk_t> &boxes)
    {
        text_chunk_t result;
        result.texts = vector<text_t>{text_t(coordinates_t(0, 0, 1, 1))};
        for (const text_chunk_t &chunk : boxes)
        {
            result.is_empty = false;
            result.texts[0].text += chunk.texts.at(0).text;
        }
        return result;
    }

    text_chunk_t make_plane(vector<text_chunk_t> &&boxes)
    {
        if (boxes.empty()) return text_chunk_t();
        //prevent huge processing
        if (boxes.size() > MAX_BOXES) return boxes_as_is(boxes);
        vector<dist_t> dists;
        dists.reserve(boxes.size() * (boxes.size() - 1));
        for (size_t i = 0; i < boxes.size(); ++i)
        {
            for (size_t j = i + 1; j < boxes.size(); ++j) dists.emplace_back(0, get_dist(boxes[i], boxes[j]), i, j);
        }
        while (!dists.empty())
        {
            auto it = min_element(dists.begin(), dists.end());
            if (it->c == 0 && is_between(boxes, it->obj1, it->obj2))
            {
                it->c = 1;
                continue;
            }
            const dist_t dist = *it;
            dists.erase(remove_if(dists.begin(), dists.end(), [&dist] (const dist_t &o) {
                        if (o.obj1 == dist.obj1 || o.obj1 == dist.obj2 ||
                            o.obj2 == dist.obj1 || o.obj2 == dist.obj2) return true;
                        return false;
                        }), dists.end());
            size_t group = create_group(boxes, dist.obj1, dist.obj2);
            for (size_t i = 0; i < boxes.size(); ++i)
            {
                if (i == group || boxes[i].is_empty) continue;
                dists.emplace_back(0, get_dist(boxes[group], boxes[i]), group, i);
            }
        }

        for (text_chunk_t &group : boxes)
        {
            if (!group.is_empty) return std::move(group);
        }
        throw pdf_error(FUNC_STRING + "all objects are moved");
    }

    string make_string(const text_chunk_t &group)
    {
        if (group.is_empty) return string();
        string result;
        for (const text_t &box : group.texts) result += box.text;
        return result;
    }

    string render_text(vector<text_chunk_t> &chunks)
    {
//        for (const text_chunk_t &chunk : chunks) cout << '(' << chunk.coordinates.x0 << ',' << chunk.coordinates.y0 << ")(" << chunk.coordinates.x1 << ',' << chunk.coordinates.y1 << ')' << chunk.texts[0].text << endl;
        return make_string(make_plane(make_text_boxes(make_text_lines(chunks))));
    }

    string output_content(unordered_set<unsigned int> &visited_contents,
                          const string &buffer,
                          const ObjectStorage &storage,
                          const pair<unsigned int, unsigned int> &id_gen,
                          const dict_t &decrypt_data)
    {
        const pair<string, pdf_object_t> content_pair = storage.get_object(id_gen.first);
        if (content_pair.second == ARRAY)
        {
            vector<pair<unsigned int, unsigned int>> contents = get_set(content_pair.first);
            string result;
            for (const pair<unsigned int, unsigned int> &p : contents)
            {
                //avoid infinite recursion
                if (visited_contents.count(p.first)) continue;
                visited_contents.insert(p.first);
                result += output_content(visited_contents, buffer, storage, p, decrypt_data);
            }
            return result;
        }
        return get_stream(buffer, id_gen, storage, decrypt_data);
    }

    vector<pair<unsigned int, unsigned int>> get_contents_id_gen(const pair<string, pdf_object_t> &page_pair)
    {
        if (page_pair.second != DICTIONARY) throw pdf_error(FUNC_STRING + "page must be DICTIONARY");
        const dict_t data = get_dictionary_data(page_pair.first, 0);
        auto it = data.find("/Contents");
        // "/Contents" key can be absent for Page. In this case Page is empty
        if (it == data.end()) return vector<pair<unsigned int, unsigned int>>();
        vector<pair<unsigned int, unsigned int>> contents_id_gen;
        const string &contents_data = it->second.first;
        switch (it->second.second)
        {
        case ARRAY:
            contents_id_gen = get_set(contents_data);
            return contents_id_gen;
        case INDIRECT_OBJECT:
            contents_id_gen.push_back(get_id_gen(contents_data));
            return contents_id_gen;
        default:
            throw pdf_error(FUNC_STRING + "/Contents type must be ARRAY or INDIRECT_OBJECT");
            break;
        }
    }

    bool put2stack(vector<pair<pdf_object_t, string>> &st, const string &buffer, size_t &i)
    {
        switch (buffer[i])
        {
        case '(':
            st.emplace_back(STRING, get_string(buffer, i));
            return true;
        case '<':
            buffer.at(i + 1) == '<'? st.emplace_back(DICTIONARY, get_dictionary(buffer, i)) :
                                     st.emplace_back(STRING, get_string(buffer, i));
            return true;
        case '[':
            st.emplace_back(ARRAY, get_array(buffer, i));
            return true;
        default:
            return false;
        }
    }

    unsigned int get_rotate(const dict_t &dictionary, unsigned int parent_rotate)
    {
        auto it = dictionary.find("/Rotate");
        if (it != dictionary.end())
        {
            unsigned int v = strict_stoul(it->second.first);
            if (v % 90 != 0) throw pdf_error(FUNC_STRING + "/Rotate must be multiple of 90.Val:" + to_string(v));
            return v;
        }
        return parent_rotate;
    }

    CharsetConverter get_charset_converter(const optional<pair<string, pdf_object_t>> &encoding)
    {
        if (!encoding) return CharsetConverter(string());
        if (encoding->second == NAME_OBJECT) return CharsetConverter(encoding->first);
        const dict_t dictionary = get_dictionary_data(encoding->first, 0);
        auto it = dictionary.find("/Differences");
        if (it != dictionary.end()) return CharsetConverter();
        it = dictionary.find("/BaseEncoding");
        return (it == dictionary.end())? CharsetConverter(string()) : CharsetConverter(it->second.first);
    }
}

PagesExtractor::PagesExtractor(unsigned int catalog_pages_id,
                               const ObjectStorage &storage_arg,
                               const dict_t &decrypt_data_arg,
                               const string &doc_arg) :
                               doc(doc_arg), storage(storage_arg), decrypt_data(decrypt_data_arg)
{
    const pair<string, pdf_object_t> catalog_pair = storage.get_object(catalog_pages_id);
    if (catalog_pair.second != DICTIONARY) throw pdf_error(FUNC_STRING + "catalog must be DICTIONARY");
    const dict_t data = get_dictionary_data(catalog_pair.first, 0);
    auto it = data.find("/Type");
    if (it == data.end() || it->second.first != "/Pages")
    {
        throw pdf_error("In root catalog type must be '/Type /Pages'");
    }
    unordered_set<unsigned int> checked_nodes;
    get_pages_resources_int(checked_nodes,
                            data,
                            get_fonts(data, Fonts(storage, dict_t())),
                            get_box(data, boost::none),
                            get_rotate(data, 0));
}

void PagesExtractor::get_pages_resources_int(unordered_set<unsigned int> &checked_nodes,
                                             const dict_t &parent_dict,
                                             const Fonts &parent_fonts,
                                             const optional<mediabox_t> &parent_media_box,
                                             unsigned int parent_rotate)
{
    auto it = parent_dict.find("/Type");
    if (it == parent_dict.end() || it->second.first != "/Pages") return;
    pair<string, pdf_object_t> kids = parent_dict.at("/Kids");
    if (kids.second != ARRAY) throw pdf_error(FUNC_STRING + "/Kids is not array");

    for (const pair<unsigned int, unsigned int> &page : get_set(kids.first))
    {
        unsigned int id = page.first;
        //avoid infinite recursion for 'bad' pdf
        if (checked_nodes.count(id)) continue;
        checked_nodes.insert(id);
        const pair<string, pdf_object_t> page_dict = storage.get_object(id);
        if (page_dict.second != DICTIONARY) throw pdf_error(FUNC_STRING + "page must be DICTIONARY");
        dict_t dict_data = get_dictionary_data(page_dict.first, 0);
        if (dict_data.at("/Type").first == "/Page")
        {
            pages.push_back(id);
            const string id_str = to_string(id);
            fonts.emplace(id_str, get_fonts(dict_data, parent_fonts));
            media_boxes.emplace(id_str, get_box(dict_data, parent_media_box).value());
            rotates.emplace(id_str, get_rotate(dict_data, parent_rotate));
            converter_engine_cache.emplace(id_str, unordered_map<string, ConverterEngine>());
            XObjects_cache.emplace(id_str, dict_t());
            dicts.emplace(id_str, std::move(dict_data));
        }
        else
        {
            get_pages_resources_int(checked_nodes,
                                    dict_data,
                                    get_fonts(dict_data, parent_fonts),
                                    get_box(dict_data, parent_media_box),
                                    get_rotate(dict_data, parent_rotate));

        }
    }
}

bool PagesExtractor::get_XObject_data(const string &parent_id,
                                      const string &XObject_name,
                                      const string &resource_name)
{
    const dict_t &parent_dict = dicts.at(parent_id);
    dict_t &XObjects = XObjects_cache.at(parent_id);
    if (XObjects.empty())
    {
        auto resources_it = parent_dict.find("/Resources");
        if (resources_it == parent_dict.end()) return false;
        const dict_t resources = get_dict_or_indirect_dict(resources_it->second, storage);
        auto it = resources.find("/XObject");
        if (it == resources.end()) return false;
        XObjects = get_dict_or_indirect_dict(it->second, storage);
    }

    auto XObject = XObjects.find(XObject_name);
    if (XObject == XObjects.end()) return false;
    dict_t dict = get_dict_or_indirect_dict(XObject->second, storage);
    if (dict.at("/Subtype").first != "/Form") return false;
    if (!dict.count("/BBox")) return false;
    fonts.emplace(resource_name, get_fonts(dict, fonts.at(parent_id)));
    converter_engine_cache.emplace(resource_name, unordered_map<string, ConverterEngine>());
    XObject_streams.emplace(resource_name, get_stream(doc, get_id_gen(XObject->second.first), storage, decrypt_data));
    auto it = dict.find("Matrix");
    if (it == dict.end())
    {
        XObject_matrices.emplace(resource_name, IDENTITY_MATRIX);
    }
    else
    {
        const array_t numbers = get_array_data(it->second.first, 0);
        if (numbers.size() != MATRIX_ELEMENTS_NUM) throw pdf_error(FUNC_STRING + "matrix must have " +
                                                                   to_string(MATRIX_ELEMENTS_NUM) +
                                                                   "elements. Data = " + it->second.first);
        XObject_matrices.emplace(resource_name, matrix_t{stof(numbers[0].first), stof(numbers[1].first),
                                                         stof(numbers[2].first), stof(numbers[3].first),
                                                         stof(numbers[4].first), stof(numbers[5].first)});
    }
    if (dict.count("/Resources"))
    {
        XObjects_cache.emplace(resource_name, dict_t());
    }
    else
    {
        dict.emplace("/Resources", parent_dict.at("/Resources"));
        XObjects_cache.emplace(resource_name, XObjects_cache.at(parent_id));
    }
    dicts.emplace(resource_name, std::move(dict));
    return true;
}

Fonts PagesExtractor::get_fonts(const dict_t &dictionary, const Fonts &parent_fonts) const
{
    auto it = dictionary.find("/Resources");
    if (it == dictionary.end()) return parent_fonts;
    const dict_t resources = get_dict_or_indirect_dict(it->second, storage);
    it = resources.find("/Font");
    if (it == resources.end()) return Fonts(storage, dict_t());
    return Fonts(storage, get_dict_or_indirect_dict(it->second, storage));
}

mediabox_t PagesExtractor::parse_rectangle(const pair<string, pdf_object_t> &rectangle) const
{
    if (rectangle.second != ARRAY && rectangle.second != INDIRECT_OBJECT)
    {
        throw pdf_error(FUNC_STRING + "wrong type=" + to_string(rectangle.second) + " val:" + rectangle.first);
    }
    const string array = (rectangle.second == INDIRECT_OBJECT)? storage.get_object(get_id_gen(rectangle.first).first).first :
                                                                rectangle.first;
    const array_t array_data = get_array_data(array, 0);
    if (array_data.size() != RECTANGLE_ELEMENTS_NUM)
    {
        throw pdf_error(FUNC_STRING + "wrong size of array. Size:" + to_string(array_data.size()));
    }
    mediabox_t result;
    for (size_t i = 0; i < result.size(); ++i) result[i] = stof(array_data.at(i).first);
    return result;
}

optional<mediabox_t> PagesExtractor::get_box(const dict_t &dictionary,
                                             const optional<mediabox_t> &parent_media_box) const
{
    auto it = dictionary.find("/MediaBox");
    if (it != dictionary.end()) return parse_rectangle(it->second);
    return parent_media_box;
}

string PagesExtractor::get_text()
{
    string text;
    for (unsigned int page_id : pages)
    {
        vector<pair<unsigned int, unsigned int>> contents_id_gen = get_contents_id_gen(storage.get_object(page_id));
        string page_content;
        unordered_set<unsigned int> visited_contents;
        for (const pair<unsigned int, unsigned int> &id_gen : contents_id_gen)
        {
            page_content += output_content(visited_contents, doc, storage, id_gen, decrypt_data);
        }
        for (vector<text_chunk_t> &r : extract_text(page_content, to_string(page_id), boost::none)) text += render_text(r);
    }
    return text;
}

optional<pair<string, pdf_object_t>> PagesExtractor::get_encoding(const dict_t &font_dict) const
{
    auto it = font_dict.find("/Encoding");
    if (it == font_dict.end()) return boost::none;
    const pair<string, pdf_object_t> encoding = (it->second.second == INDIRECT_OBJECT)?
                                                get_indirect_object_data(it->second.first, storage) : it->second;
    if (encoding.second != DICTIONARY && encoding.second != NAME_OBJECT)
    {
        throw pdf_error(FUNC_STRING + "wrong /Encoding type: " + to_string(encoding.second) + " val=" + encoding.first);
    }
    return encoding;
}

DiffConverter PagesExtractor::get_diff_converter(const optional<pair<string, pdf_object_t>> &encoding) const
{
    if (!encoding || encoding->second == NAME_OBJECT) return DiffConverter();
    const dict_t dictionary = get_dictionary_data(encoding->first, 0);
    auto it2 = dictionary.find("/Differences");
    if (it2 == dictionary.end()) return DiffConverter();
    return DiffConverter::get_converter(dictionary, it2->second, storage);
}

ToUnicodeConverter PagesExtractor::get_to_unicode_converter(const dict_t &font_dict)
{
    auto it = font_dict.find("/ToUnicode");
    if (it == font_dict.end())
    {
        auto it2 = font_dict.find("/FontDescriptor");
        if (it2 == font_dict.end()) return ToUnicodeConverter();
        const dict_t desc_dict = get_dict_or_indirect_dict(it2->second, storage);
        auto it3 = desc_dict.find("/FontFile");
        if (it3 != desc_dict.end() && font_dict.count("/Encoding") == 0)
        {
            const pair<unsigned int, unsigned int> id_gen = get_id_gen(it3->second.first);
            if (!cmap_cache.count(id_gen.first)) cmap_cache.emplace(id_gen.first,
                                                                    get_FontFile(doc, storage, id_gen, decrypt_data));
            return ToUnicodeConverter(cmap_cache[id_gen.first]);
        }
        it3 = desc_dict.find("/FontFile2");
        if (it3 == desc_dict.end()) return ToUnicodeConverter();
        const pair<unsigned int, unsigned int> id_gen = get_id_gen(it3->second.first);
        if (!cmap_cache.count(id_gen.first)) cmap_cache.emplace(id_gen.first,
                                                                get_FontFile2(doc, storage, id_gen, decrypt_data));
        return ToUnicodeConverter(cmap_cache[id_gen.first]);
    }
    switch (it->second.second)
    {
    case INDIRECT_OBJECT:
    {
        const pair<unsigned int, unsigned int> id_gen = get_id_gen(it->second.first);
        if (!cmap_cache.count(id_gen.first)) cmap_cache.emplace(id_gen.first,  get_cmap(doc, storage, id_gen, decrypt_data));
        return ToUnicodeConverter(cmap_cache[id_gen.first]);
    }
    case NAME_OBJECT:
        return ToUnicodeConverter();
    default:
        throw pdf_error(FUNC_STRING + "/ToUnicode wrong type: " + to_string(it->second.second) + " val:" + it->second.first);
    }
}

ConverterEngine* PagesExtractor::get_font_encoding(const string &font, const string &resource_id)
{
    auto it = converter_engine_cache.at(resource_id).find(font);
    if (it != converter_engine_cache[resource_id].end()) return &it->second;
    const dict_t &font_dict = fonts.at(resource_id).get_current_font_dictionary();
    optional<pair<string, pdf_object_t>> encoding = get_encoding(font_dict);
    converter_engine_cache[resource_id].emplace(font, ConverterEngine(get_charset_converter(encoding),
                                                                      get_diff_converter(encoding),
                                                                      get_to_unicode_converter(font_dict)));
    return &converter_engine_cache[resource_id][font];
}

void PagesExtractor::do_BI(extract_argument_t &arg, size_t &i)
{
    while (true)
    {
        i = arg.content.find("EI", i);
        if (i == string::npos)
        {
            i = arg.content.length();
            return;
        }
        i += sizeof("EI") - 1;
        if (i == arg.content.length() || is_blank(arg.content[i])) return;
    }
}

void PagesExtractor::do_Tf(extract_argument_t &arg, size_t &i)
{
    arg.coordinates.set_Tf(arg.st);
    const string font = pop(arg.st).second;
    fonts.at(arg.resource_id).set_current_font(font);
    arg.encoding = get_font_encoding(font, arg.resource_id);
}

void PagesExtractor::do_Tj(extract_argument_t &arg, size_t &i)
{
    if (!arg.in || !arg.encoding || arg.encoding->is_vertical()) return;
    text_chunk_t chunk = arg.encoding->get_string(decode_string(pop(arg.st).second),
                                                  arg.coordinates,
                                                  0,
                                                  fonts.at(arg.resource_id));
    if (!chunk.is_empty) arg.result[0].push_back(std::move(chunk));
}

void PagesExtractor::do_Tm(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_Tm(arg.st);
}

void PagesExtractor::do_TJ(extract_argument_t &arg, size_t &i)
{
    if (!arg.in || !arg.encoding || arg.encoding->is_vertical()) return;
    vector<text_chunk_t> tj_texts = arg.encoding->get_strings_from_array(pop(arg.st).second,
                                                                         arg.coordinates,
                                                                         fonts.at(arg.resource_id));
    arg.result[0].insert(arg.result[0].end(),
                         std::make_move_iterator(tj_texts.begin()),
                         std::make_move_iterator(tj_texts.end()));
}

void PagesExtractor::do_TL(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_TL(arg.st);
}

void PagesExtractor::do_Tc(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_Tc(arg.st);
}

void PagesExtractor::do_Td(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_Td(arg.st);
}

void PagesExtractor::do_Do(extract_argument_t &arg, size_t &i)
{
    const string XObject = pop(arg.st).second;
    const string resource_name = get_resource_name(arg.resource_id, XObject);
    if (!get_XObject_data(arg.resource_id, XObject, resource_name)) return;
    auto it = XObject_streams.find(resource_name);
    if (it != XObject_streams.end())
    {
        const matrix_t ctm = XObject_matrices.at(resource_name) * arg.coordinates.get_CTM();
        for (vector<text_chunk_t> &r : extract_text(it->second, resource_name, ctm)) arg.result.push_back(std::move(r));
    }
}

void PagesExtractor::do_quote(extract_argument_t &arg, size_t &i)
{
    if (!arg.encoding || !arg.in) return;
    arg.coordinates.set_quote(arg.st);
    arg.result[0].push_back(arg.encoding->get_string(decode_string(pop(arg.st).second),
                                                     arg.coordinates,
                                                     0,
                                                     fonts.at(arg.resource_id)));
}

void PagesExtractor::do_BT(extract_argument_t &arg, size_t &i)
{
    arg.coordinates.set_default();
    arg.in = true;
}

void PagesExtractor::do_ET(extract_argument_t &arg, size_t &i)
{
    arg.in = false;
}

void PagesExtractor::do_Q(extract_argument_t &arg, size_t &i)
{
    arg.coordinates.do_Q(arg.st);
}

void PagesExtractor::do_TD(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_TD(arg.st);
}

void PagesExtractor::do_T_star(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_T_star(arg.st);
}

void PagesExtractor::do_double_quote(extract_argument_t &arg, size_t &i)
{
    if (!arg.encoding || !arg.in) return;
    const string str = pop(arg.st).second;
    arg.coordinates.set_double_quote(arg.st);
    arg.result[0].push_back(arg.encoding->get_string(str, arg.coordinates, 0, fonts.at(arg.resource_id)));
}

void PagesExtractor::do_Ts(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    fonts.at(arg.resource_id).set_rise(stof(pop(arg.st).second));
}

void PagesExtractor::do_Tw(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_Tw(arg.st);
}

void PagesExtractor::do_Tz(extract_argument_t &arg, size_t &i)
{
    if (!arg.in) return;
    arg.coordinates.set_Tz(arg.st);
}

void PagesExtractor::do_cm(extract_argument_t &arg, size_t &i)
{
    arg.coordinates.do_cm(arg.st);
}

void PagesExtractor::do_q(extract_argument_t &arg, size_t &i)
{
    arg.coordinates.do_q(arg.st);
}

vector<vector<text_chunk_t>> PagesExtractor::extract_text(const string &page_content,
                                                          const string &resource_id,
                                                          const optional<matrix_t> CTM)
{
    ConverterEngine *encoding = nullptr;
    Coordinates coordinates(CTM? *CTM : init_CTM(rotates.at(resource_id), media_boxes.at(resource_id)));
    vector<pair<pdf_object_t, string>> st;
    st.reserve(PDF_STRINGS_NUM);
    bool in = false;
    vector<vector<text_chunk_t>> result(1);
    result[0].reserve(PDF_STRINGS_NUM);
    extract_argument_t argument{result, encoding, st, coordinates, resource_id, in, page_content};
    for (size_t i = skip_comments(page_content, 0, false);
         i != string::npos && i < page_content.length();
         i = skip_comments(page_content, i, false))
    {
        if (in && put2stack(st, page_content, i)) continue;
        string token = get_token(page_content, i);
        extract_handler_t handler = get_extract_handler(token);
        if (handler) (this->*handler)(argument, i);
        else st.emplace_back(VALUE, std::move(token));
    }

    return result;
}
